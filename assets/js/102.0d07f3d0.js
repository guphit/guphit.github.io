(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{621:function(t,s,a){"use strict";a.r(s);var r=a(45),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_6-1-可滚动组件简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-可滚动组件简介"}},[t._v("#")]),t._v(" 6.1 可滚动组件简介")]),t._v(" "),a("p",[t._v("当组件内容超过当前显示视口(ViewPort)时，如果没有特殊处理，Flutter则会提示Overflow错误。为此，Flutter提供了多种可滚动组件（Scrollable Widget）用于显示列表和长布局。在本章中，我们先介绍一下常用的可滚动组件（如"),a("code",[t._v("ListView")]),t._v("、"),a("code",[t._v("GridView")]),t._v("等），然后介绍一下"),a("code",[t._v("ScrollController")]),t._v("。可滚动组件都直接或间接包含一个"),a("code",[t._v("Scrollable")]),t._v("组件，因此它们包括一些共同的属性，为了避免重复介绍，我们在此统一介绍一下：")]),t._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Scrollable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("axisDirection "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" AxisDirection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("down"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("controller"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("physics"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token metadata symbol"}},[t._v("@required")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("viewportBuilder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后面介绍")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[a("code",[t._v("axisDirection")]),t._v("滚动方向。")]),t._v(" "),a("li",[a("code",[t._v("physics")]),t._v("：此属性接受一个"),a("code",[t._v("ScrollPhysics")]),t._v("类型的对象，它决定可滚动组件如何响应用户操作，比如用户滑动完抬起手指后，继续执行动画；或者滑动到边界时，如何显示。默认情况下，Flutter会根据具体平台分别使用不同的"),a("code",[t._v("ScrollPhysics")]),t._v("对象，应用不同的显示效果，如当滑动到边界时，继续拖动的话，在iOS上会出现弹性效果，而在Android上会出现微光效果。如果你想在所有平台下使用同一种效果，可以显式指定一个固定的"),a("code",[t._v("ScrollPhysics")]),t._v("，Flutter SDK中包含了两个"),a("code",[t._v("ScrollPhysics")]),t._v("的子类，他们可以直接使用：\n"),a("ul",[a("li",[a("code",[t._v("ClampingScrollPhysics")]),t._v("：Android下微光效果。")]),t._v(" "),a("li",[a("code",[t._v("BouncingScrollPhysics")]),t._v("：iOS下弹性效果。")])])]),t._v(" "),a("li",[a("code",[t._v("controller")]),t._v("：此属性接受一个"),a("code",[t._v("ScrollController")]),t._v("对象。"),a("code",[t._v("ScrollController")]),t._v("的主要作用是控制滚动位置和监听滚动事件。默认情况下，Widget树中会有一个默认的"),a("code",[t._v("PrimaryScrollController")]),t._v("，如果子树中的可滚动组件没有显式的指定"),a("code",[t._v("controller")]),t._v("，并且"),a("code",[t._v("primary")]),t._v("属性值为"),a("code",[t._v("true")]),t._v("时（默认就为"),a("code",[t._v("true")]),t._v("），可滚动组件会使用这个默认的"),a("code",[t._v("PrimaryScrollController")]),t._v("。这种机制带来的好处是父组件可以控制子树中可滚动组件的滚动行为，例如，"),a("code",[t._v("Scaffold")]),t._v("正是使用这种机制在iOS中实现了点击导航栏回到顶部的功能。我们将在本章后面“滚动控制”一节详细介绍"),a("code",[t._v("ScrollController")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"scrollbar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrollbar"}},[t._v("#")]),t._v(" Scrollbar")]),t._v(" "),a("p",[a("code",[t._v("Scrollbar")]),t._v("是一个Material风格的滚动指示器（滚动条），如果要给可滚动组件添加滚动条，只需将"),a("code",[t._v("Scrollbar")]),t._v("作为可滚动组件的任意一个父级组件即可，如：")]),t._v(" "),a("div",{staticClass:"language-dart line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-dart"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Scrollbar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SingleChildScrollView")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("code",[t._v("Scrollbar")]),t._v("和"),a("code",[t._v("CupertinoScrollbar")]),t._v("都是通过监听滚动通知来确定滚动条位置的。关于的滚动通知的详细内容我们将在本章最后一节中专门介绍。")]),t._v(" "),a("h4",{attrs:{id:"cupertinoscrollbar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cupertinoscrollbar"}},[t._v("#")]),t._v(" CupertinoScrollbar")]),t._v(" "),a("p",[a("code",[t._v("CupertinoScrollbar")]),t._v("是iOS风格的滚动条，如果你使用的是"),a("code",[t._v("Scrollbar")]),t._v("，那么在iOS平台它会自动切换为"),a("code",[t._v("CupertinoScrollbar")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"viewport视口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#viewport视口"}},[t._v("#")]),t._v(" ViewPort视口")]),t._v(" "),a("p",[t._v("在很多布局系统中都有ViewPort的概念，在Flutter中，术语ViewPort（视口），如无特别说明，则是指一个Widget的实际显示区域。例如，一个"),a("code",[t._v("ListView")]),t._v("的显示区域高度是800像素，虽然其列表项总高度可能远远超过800像素，但是其ViewPort仍然是800像素。")]),t._v(" "),a("h3",{attrs:{id:"基于sliver的延迟构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于sliver的延迟构建"}},[t._v("#")]),t._v(" 基于Sliver的延迟构建")]),t._v(" "),a("p",[t._v("通常可滚动组件的子组件可能会非常多、占用的总高度也会非常大；如果要一次性将子组件全部构建出将会非常昂贵！为此，Flutter中提出一个Sliver（中文为“薄片”的意思）概念，如果一个可滚动组件支持Sliver模型，那么该滚动可以将子组件分成好多个“薄片”（Sliver），只有当Sliver出现在视口中时才会去构建它，这种模型也称为“基于Sliver的延迟构建模型”。可滚动组件中有很多都支持基于Sliver的延迟构建模型，如"),a("code",[t._v("ListView")]),t._v("、"),a("code",[t._v("GridView")]),t._v("，但是也有不支持该模型的，如"),a("code",[t._v("SingleChildScrollView")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"主轴和纵轴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主轴和纵轴"}},[t._v("#")]),t._v(" 主轴和纵轴")]),t._v(" "),a("p",[t._v("在可滚动组件的坐标描述中，通常将滚动方向称为主轴，非滚动方向称为纵轴。由于可滚动组件的默认方向一般都是沿垂直方向，所以默认情况下主轴就是指垂直方向，水平方向同理。")])])}),[],!1,null,null,null);s.default=e.exports}}]);